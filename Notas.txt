Aqui voy a tomar las notas más importantes relacionadas con el curso: PowerBi - Modelado de datos con DAX

DAX: Data Analysis Expresions
	Solamente podemos trabajar con tablas o columnas, no es posible trabar con celdas únicas, como en Excel 

DAX nos permite trabaja con operadores matemáticos, lógicos o de cadena (string), 

NO ES RECOMENDABLE CREAR COLUMNAS CALCULADAS PARA EL DESGLOCE DE INFORMACION DE OTRAS COLUMNAS 
	EJEMPLO: Tenemos una columna fecha, y queremos sacar tanto el Año, mes Dia, para ello podemos crear una nueva columna en duplicado y filtrarlo por el Año Mes Dia, dependiendo. ESO ESTÁ MAl, Para ello podemos hacer la creacion de tablas midiante el uso de Dax. De la siguiente manera: 

CalendarioDAX = 
ADDCOLUMNS(
	CALENDAR(
	DATE (2021, 1, 1),
	DATE (2022, 12, 31)
	),
"AñoDAX", YEAR([Date]),
"MesDAX", FORMAT([Date], "mmmm"), 
"DiaDAX", FORMAT([Date], "dddd")
)


Como Nota interesante: Es mejor ordenar todas las columnas nuevas y Medidas dentro de una tabla nueva, que podemos crear desde nuestro TableView, a la izquierda

	Trabajo con Variables
Es posible hacer medidas en donde tengamos dentro a variables. Es necesario tener en cuenta las palabras claves VAR y RETURN
Ejemplo: 

Differencia importe con variables = 
    VAR vImporte = SUMX( Ventas, Ventas[Cantidades] * Ventas[Precios] ) 
    VAR vImporteCat = SUMX( Ventas, Ventas[Cantidades] * RELATED(Producto[Precio Catalogo]) )
RETURN
    vImporteCat - vImporte


Division por 0: En caso de que nosotros sepamos con certeza que el DIVISOR nunca va a ser =0, entonces podemos hacer uso de el operador barra "/", en caso de que exista un DIVISOR =0, El resultado sreá infinito, y causará problemas a la hora de representarlo. Ahora si queremos evitar esta situación, lo que podemos hacer es usar la función DIVIDE() ya que nos ayuda a controlar la division por 0


Datos en Blanco:
Para ello podemos hacer uso de
Nombre de Medida = [Columna1] + 0


	SENTIDO, Siempre va desde el lado Unico al lado Muchos -Mediante la configuración del modelo tabular es posible mantenerlo así, o lo podemos cambiar de acuerdo a nuestras necesidades haciendo que la relación tenga AMBOS sentidos. Click Secundario en la linea de relación - Propiedades - Relación del filtro Cruzado. Solo que es ineficiente 
	Para ello podemos hacer uso de DAX para crear una nueva medida de la siguiente manera

Clientes por productos = 
CALCULATE(
	[Cantidad clientes],
	CROSSFILTER(Ventas[IdCliente], Clientes[IdClientes], BOTH)
)


Contexto de filtros
Para hacer una medid con DAX y que la medida esté filtrada, tenemos que hacer uso de la function CALCULATE

CALCULATE( Expresión de Cálculo o Medida , (Opcionales) Son Expresiones de filtro que sirven para modificar el contexto de filtro externo en el que se evalua la medida )

Vaya, Sirve para que ese Visual no sea afectado por un filtro externo, Ej: 

Alemania = CALCULATE( [Cantidad], Clientes[Pais] = "Alemania" )
Esta medida se usa para mostrar el valor en una CARD, y tenemos dentro del reporte un Filtro que tiene la lista de los paises, en caso de que nosotros queramos hacer cambios dentro de este Ribbon no se verá efectuado ningun tipo de cambio a nuestra Card



Contexto de Fila //
Cuando quetemos que se hagan sumas teniendo en cuenta el orden por fila, es necesario ahcer uso igualmente de la function CALCULATE
Caso: Queremos hacer la suma de los valores que nos encontramos por cada Customer, tanto en OverPyament como en Underpayment para saber si el saldo es posit   ivo o negativo. 
Lo que podemos hacer es colocar esta expresión para logara esa suma
SumaCustomer = SUM( Tabla[Customer] ) //no 
hayq eu escribir la siguiente formula  
	Igualmente podria funcionar 



Otra forma de hacer filtros es con el uso de FILTER, pero esta funcion lo que hace es iterar entre la informacio despues de los filtros. Si nosotros usamos dentro del FILTER el argumento [Pais]="Alemania", y luego dentro de los Ribbons nosotros vamos a hacer el filtrado primero por [Pais]="Mexico", la medida nos va a dar BLANCO porque dentro de Mexico ya no encontramos los valores de ALEMANIA, entonces no sirve tan chido. Para ello devemos hacer uso de CALCULATE  y dar un filtro pero por contexto, que este filtro lo que hace es tener siempre presente el contexto que se le da. sin considerar el Ribborn externo exacto que modificaría ese valor. 



Cuando usamos CALCULATE para generar un filtro de informacion, es usual que los filtros externos no funcionen, es por ello que si queremos que los filtros externos aun funcionen por alguna razon, es necesario hacer uso de KEEPFILTERS. 
Caso: Importes Altos = CALCULATE(
	COUNTROWS(Ventas), 
	Ventas[Cantidades] = Ventas[Precios] >= 500
) //Usando esta function vamos a ignorar a los filtros externos

Para generar una Medida con resultado inamico ado un filtro externo podemos escribir entonces la siguiente expression

Importes Altos = CALCULATE (
	COUNTROWS(Ventas), 
	KEEPFILTERS( Ventas[Cantidades] = Ventas[Pedidos] >= 500 )
)

Como crear medidas ue solamente tengan contemplado el valor de una sola columna y una sola fila y que este sea visible dentro de una tabla
Podemos hacer uso de la siguiente Dax function
AUDI Status Underpayment = CALCULATE(SUM(InformationImportatn[Underpayment Amount]), 
    VALUES(InformationImportatn[Customer]), InformationImportatn[Customer] = "AUDI")

La function VALUES nos selecciona de alguna manera la columna para poder trabajar con ella (Filtro de Columa) y el siguiente parametro dentro de CALCULATE nos ayuda a crear el filtro de forma correcta


Como vimos casi al inicio de estas notas, es importante tener un calendario disponible para colocar la fecha de hoy y asì colocarla en algun lugar indicando que es la fecha de Refresh màs actual. Y la otra es àra hacer algunos filtros dinmàmicos en function de la fecha. Para ello hay algunas opciones en como se puede hacer esto. 
Una es Generando una nueva tabla con el Codigo M para indicar cada mes, 
Otra es generarndo un documento de Excel y ahí colocar las fechas desde el inicio hasta el fin en donde queremos
Otra es la mejor, CREAR UNA TABLA Y RELLENARLA CON DAX
	Pasos
Creamos una nueva tabla desde nuestro reporte
Y colocamos el siguiente código. 
Calendario = CALENDAR( Fecha_de_inicio(Año, Mes, Dia) , Fecha_final(Año, Mes, Dia) )
Calendario = CALENDAR( DATE(2018, 1, 1), DATE(2025, 12, 31) )
	REALMENTE ES LA MEJOR OPCION PORQUE, A DIFERENCIA DE LA ANTERIOR FORMA, AQUI SI NOS DA LOS VALORES SORTEADOS DE FORMA CORRECTA. 
CALENDARAUTO - Determina el rango de las fechas de forma automatica,

INTERESANTE - 	Cómo hacer un análisis de media movil, Una Media movil se puede ver de diferentes formas, una es desde el punto de vista de control que puede ser un filtro, otra es desde estadística que se puede tomar como un suavizado
Lo que hace el filtro de Media movil básicamente es, por cada cierta cantidad de valores datos, va a devolver el promedio, esto sirve más ddentro de un visual que dentro de una tabla. Igualmente sirve bastante para hacer análisis de información de pronóstico sin tantos datos pero que de igual forma sean fieles a la estructura general de la información. 

Media Movil 10 dias = 
VAR UltimosDias = CALCULATETABLE(
	DATESINPERIOD(
	Calendario[Fecha], 
	MAX( Calendario[Fecha] ), 
	-10, 	//Es el paso de tiempo en Dias
	DAY	//Aqui se especifica que es en días
	)
)
VAR Inicio = CALCULATE( MIN( Ventas[Fecha] ), REMOVEFILTERS )
RETURN IF(
	Inicio <= MINX( UltimosDias, Calendario[Fechas] ), 
	AVERAGEX( UltimosDias, [Cantidad] )
)


USO DE SEGMENTADORES
Los segmentadores son sliders que cuentan con valores numericos, y que su valor puede ser variable en tiempo de ejecución pero de igual manera su valor producido puede ser usado como variable dentro de una function DAX. 
Para la creación de un nuevo segmentador es necesario situarnos en la ventana Modelado - Modeling y seleccionar la opcion New Parameter - Nuevo parametro, solamente falta configurar los elementos que nos pide en la ventana emergente y listo. Es importante tener seleccionada la opcion de Create Slicer antes de continuar. 



















	Buenas prácticas: *******************************************************

Escribimos el nombre de la tabla y luego el de la columna entre corchetes: Tabla1[Columna1]

Comentarios: //Este es un comentario simple dentro de la caja de texto de DAX

Los filtros siempre se van a propagar desde EL LADO UNO AL LADO MUCHOS










	Expresiones aprendidas y usadas: *******************************************************

IN: Sirve para trabajar con conjuntos
NOT: Negación

Funciones e Agregaciòn:
SUM
MIN		(Tabla1[Columna1])
MAX
COUNT
AVERAGE

Agregados especiales
SUM - Solamente nos permite un argumento que es una tabla
SUMX - Nos permite una tabla y una expression como argumento - DEVUELVE LA SUMA DE UNA EXPRESION EVALUADA PARA CADA FILA DE UNA TABLA 
Ejemplo- Calcular la suma de la multiplicación final (Semisuma)
SUMX(Tabla_a_Recorrer, Expresion)
Importes = SUMX(Ventas, Ventas[Cantidades] + Ventas[Precios])

Es posible que se quiera hacer uso de esta ultima función pero teniendo una relación entre dos o más tablas separadas. Para ello es necesario tener en consideración lo siguiente: 
Es necesario conocer el sentido de la información
Caso: Ventas[Contidades] MaU Producto[Precio Catalogo]
Con esto podemos sacar la siguiente DAX formula

Importe Catalogo = SUMX(Ventas, Ventas[Cantidades] * RELATED(Producto[Precio Catalogo]))

DIVIDE(Numerador, Denominador, Valor si es Blank) //Ayuda a no tener errores si el divisor es =0
DEVIDE(10, 2) //== 5
DEVIDE(10, 0, 0) // == 0

Para obtener el ranking u orden de los elementos podemos hacer uso de:
RANKX(Tabla que integra, Funcion a evaluar, (Opcional) Orden [ASC o DESC])
Ejemplo
RANKX(
	ALL(Tabla[Columna]), 
	[Suma precio]
)
NOTA: Los datos tienen que ya estar ordenados de tal forma que el 1 corresponda con el precio más bajo y el 10 corresponda con el mayor, es importante tener esto en cuenta ya que de no ser así, podemos tener varios inconvenientees a la hora de hacer el ordenamiento


VALUES(TalbeName[ColumnName]) - Dentro de la function CALCULATE, nos ayuda a solamente tener seleccionada una sola Columna, para así poder el filtro y los calculos con esta columna

ALL() - Sempre regresa una tabla, sin que sea afectada por los filtros externos aplicados en tiempo de ejecucion
Caso: Es un modificador de filtro para CALCULATE, Podemos hacer uso de esta para tener siempre seleccionados los datos base de una tabla, o de una columna, o de algunas columnas. Si el parametro que recive es solo la tabla, solo regrsará la tabla, si recibe una columna, recibira solamente los valores de esa columna,y si recibe mas columnas, mandará todos los valores que se intersecten
EN CASO DE NO RECIBIR ALGUN ARGUMENTO, no generará nungun duplicado, pero actuará como tal porque lo que hará es limpiar los  filtros externos y luego hacer el calculo con la informacion base, lo que seria lo más eficiente 
REMOVEFILTERS() - Funciona igual que ALL() - Vacio

	Tipos de Filtro
IF(Condicion, IF YES, IF NOT) - Se establece una condicion a evaluar y dos posibles salidas, True o False, es una operacion ue se realiza de forma fila a fila, REALMENTE NO ES RECOMENDABLE PORQUE OCUPA MUCHO TRABAJO EN CANTIDADES GRANDES DE INFORMACION 
FILTER(Tabla, Condicion de filtro) - El calculo se realiza solo para las filas de la tabla resultante tras filtrar, pero en caso de que se tome como a tabla la Tabla de Hechos es necesario que en la condicion coloquemos un artefacto para optimizar.ES UNA BUENA OPCION A LA HORA DE HACER FILTROS. 
CALCULATE (Expresion, Otra expression que puede ser alguna condicion) - Esta condicion primero hace los filtros a partir del 2do parametro, ES UNA MUY BUENA OPCION ya que de igual manera nos ayuda a cambiar el contexto de filtro. 
CALCULATE + KEEPFILTERS : Es la mejor de todas para hacer algun filtro, ya que es muy eficiente y más rapido que todas las demas. 
Ej: 
VALOR MEASURE = CALCULATE(
	SUM( Tabla1[Columna1] ), 
	KEEPFILTERS( Tabla2[Columna2] = "Specific Value" )
)
EJ2:
//Para tener en un solo caso lo mejor de los mundos en los filtros, es importante tener en cuenta que podemos hacer filtros dentro e los filtros. SIEMPRE TENIENDO A KEEPFILTER COMO EL FILTRO GLOBAL
Suma = CALCULATE(
Overpayment A(0, 100) = CALCULATE(
    SUM(InformationImportatn[Overpayment Amount]), //Recordar que esta sera mi informacion base
    KEEPFILTERS(
        FILTER(
            ALL(s
                InformationImportatn[Underpayment Amount], InformationImportatn[Overpayment Amount]
            ),
            InformationImportatn[Underpayment Amount] > 99 || InformationImportatn[Overpayment Amount] > 300
        )
    )
)


ALLSELECTED(Table, Talbe[Column]) - Esta función nos ayuda a poder tener toda la columna seleccionada. Antes, en algunas ocaciones cuando era necesario mostrar tanto el valor que corresponde a una columna como su percentage, era necesario solamente cambiar el formato en como se es mostrado, pero antes daba errores, para ello era necesario hacer uso de la function ALLSELECTED, para así poder mantener todos los valores selccionados y mostrar correctamente l  valor cuando se aplica un filtro externo. 
Ej:
% Total AllS = DIVIDE(
	SUM(Ventas[Cantidades]), 
	SUMX(
	ALLSELECTED(Ventas),
	Ventas[cantidades]	
	)
)



Otra forma interesante de hacer filtros, pero ahora por TABLAS (Crear tablas no relacionadas en base a otras), es posible de dos maneras, una es con IN y otra es con TREATAS
EJ	IN
Cantidad 2021 - 2025 = CALCULATE (
	SUM(TABLA1[Columna1]), 
	Calendario[AÑO] IN {2021,2025}  //Recordar que siempre s necesario colocar LLAVES
)
EJ 	TREATAS		Tiene un buen rendimiento.Puede hacer filtros entre tablas no relacionadas
Cantidad TreatAs = CALCULATE (
	SUM(TABLA1[Columna1]),
	TREATAS (
	{2021, 2025}, //Los parametros a considerar dentro de la columnaA
	Calendario(AÑO) //ColumnaA que sera evaluada
	)
)


USERELATIONSHIP(Tabla1[Columna1], Tabla2[Columna1]) - Nos sirve para hacer relaciones (en plural) entre dos tablas, usualmente cuando se tienen las tablas en el modelo tabular solamente podemos tener activa una sola relacion, se pueden tener mas de una, pero activas solo una. Es por eso que usamos USERELATIONSHIP para hacer esto posible
Ej  TENER EN CUENTA QUE LA RELACION, EN EL MODELO TABULAR, SI DEBE DE EXISTIR
Cantidad Entrega = CALCULATED( //Usamaos esta funcion inicialmente porque es la unnica que nos permite hacer uso de la funcion
	[Cantidad Orden], 
	USERELATIONSHIP( //Modificador que permite activar temporalmente una relacion que esta inactiva
		Calendario[Fecha], 
		FechasVenta[FechaEntrega]
	)
)

Total Years To Date - Nos ayuda a hacer conglomerado de una expresion en funcion a las fechas, Es bastante util utilizarlo solo ya que por defecto ya cuenta con la integracion de CALCULATE para su empleabilidad. 
TOTLAYTD( [Cantidad], Calendario[Fechas], AñoFiscal )
Año fiscal, colocamos la fecha de el término de nuestro año fiscal con el siguiente formato "mm-yy"

MIN, MAX - Igualmente pueden ayudarnos a obtener el valor desado en FECHAS, solamente regresa un solo valor
FIRSTDATE, LASTDATE - Regresan una tabla, regresan una fecha si, pero regresan una tabla. Ej. 
Tenemos una tabla que tiene como Headers del lado Izquiero una division por Año, Quarter, Mes, entonces, FIRSTDATE y LASTDATE nos van a regresar los valores correspondientes de el AÑO, el Quartes y el Mes, 













		POSIBLES ERRORES: *******************************************************
Es posible que en algunas ocaciones, a la hora de hacer la relacion entre tablas, encontremos informacion con datos Huerfanos, para esto, lo que hará PowerBi es tomarlas en cuenta, pero los alores serán regresados como valores "En Blanco", a este error se le conoce como "Error o Inclumplimiento de la integridad Referencial"
































